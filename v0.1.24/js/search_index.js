var search_data = {"index":{"searchIndex":["suboptparse","error","sharedstate","util","suboptparser","autorequire","[]()","[]()","[]=()","[]=()","addcmd()","after_parse()","auto_require_command_description()","auto_require_command_name()","auto_require_command_parent()","autorequire()","autorequire_init()","call()","cmd()","cmdadd()","cmddocadd()","cmdhelp()","generate_require_path()","get_subcommand()","help()","merge!()","method_missing()","new()","new()","on_parse()","parse()","parse!()","post_parse()","pre_parse()","raise_unknown()","raise_unknown=()","recursive_merge()","register()","respond_to_missing?()","changelog","readme"],"longSearchIndex":["suboptparse","suboptparse::error","suboptparse::sharedstate","suboptparse::util","suboptparser","suboptparser::autorequire","suboptparse::sharedstate#[]()","suboptparser#[]()","suboptparse::sharedstate#[]=()","suboptparser#[]=()","suboptparser#addcmd()","suboptparser#after_parse()","suboptparser::autorequire::auto_require_command_description()","suboptparser::autorequire::auto_require_command_name()","suboptparser::autorequire::auto_require_command_parent()","suboptparser::autorequire#autorequire()","suboptparser::autorequire#autorequire_init()","suboptparser#call()","suboptparser#cmd()","suboptparser#cmdadd()","suboptparser::autorequire#cmddocadd()","suboptparser#cmdhelp()","suboptparser::autorequire#generate_require_path()","suboptparser#get_subcommand()","suboptparser#help()","suboptparse::sharedstate#merge!()","suboptparser#method_missing()","suboptparse::sharedstate::new()","suboptparser::new()","suboptparser#on_parse()","suboptparser#parse()","suboptparser#parse!()","suboptparser#post_parse()","suboptparser#pre_parse()","suboptparser#raise_unknown()","suboptparser#raise_unknown=()","suboptparse::util::recursive_merge()","suboptparser::autorequire::register()","suboptparser#respond_to_missing?()","",""],"info":[["SubOptParse","","SubOptParse.html","",""],["SubOptParse::Error","","SubOptParse/Error.html","",""],["SubOptParse::SharedState","","SubOptParse/SharedState.html","","<p>A helper class that may be used in SubOptParse.shared_state.\n<p>This class wraps a Hash and allows other …\n"],["SubOptParse::Util","","SubOptParse/Util.html","","<p>Utility methods that may help in writing commands.\n"],["SubOptParser","","SubOptParser.html","","<p>An adaptation of Ruby’s default OptionParser to support sub-commands.\n<p>rubocop:disable Metrics/ClassLength …\n"],["SubOptParser::AutoRequire","","SubOptParser/AutoRequire.html","","<p>Methods and logic to support auto-requiring commands that are not found in a sub-command.\n<p>This is done …\n"],["[]","SubOptParse::SharedState","SubOptParse/SharedState.html#method-i-5B-5D","(name)","<p>Convenience function equivalent to shared_state.curr.\n"],["[]","SubOptParser","SubOptParser.html#method-i-5B-5D","(name)","<p>Users may override how to lookup a command or return “nil” if none is found.\n"],["[]=","SubOptParse::SharedState","SubOptParse/SharedState.html#method-i-5B-5D-3D","(name, value)","<p>Convenience function equivalent to shared_state.curr = value.\n"],["[]=","SubOptParser","SubOptParser.html#method-i-5B-5D-3D","(name, subcmd)","<p>Add a sub command as the given name. No automatic initializtion is done. Prefer using #cmdadd().\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">parser</span>[<span class=\"ruby-string\">&quot;sub_parser&quot;</span>] <span class=\"ruby-operator\">...</span>\n</pre>\n"],["addcmd","SubOptParser","SubOptParser.html#method-i-addcmd","(name, description = nil, *args)",""],["after_parse","SubOptParser","SubOptParser.html#method-i-after_parse","(&blk)","<p>Similar to #on_parse but happens after parsing.\n"],["auto_require_command_description","SubOptParser::AutoRequire","SubOptParser/AutoRequire.html#method-c-auto_require_command_description","()",""],["auto_require_command_name","SubOptParser::AutoRequire","SubOptParser/AutoRequire.html#method-c-auto_require_command_name","()",""],["auto_require_command_parent","SubOptParser::AutoRequire","SubOptParser/AutoRequire.html#method-c-auto_require_command_parent","()",""],["autorequire","SubOptParser::AutoRequire","SubOptParser/AutoRequire.html#method-i-autorequire","(name)","<p>Auto-require the command.\n<p>The root app name is ignored as it can change by program invocation.\n"],["autorequire_init","SubOptParser::AutoRequire","SubOptParser/AutoRequire.html#method-i-autorequire_init","()",""],["call","SubOptParser","SubOptParser.html#method-i-call","(*argv, into: nil)","<p>Parse the arguments in *argv and execute #call() on the returned command. Any unparsed values are passed …\n"],["cmd","SubOptParser","SubOptParser.html#method-i-cmd","(prc = nil)",""],["cmdadd","SubOptParser","SubOptParser.html#method-i-cmdadd","(name, description = nil, *args)","<p>Add a command (and return the resulting command).\n"],["cmddocadd","SubOptParser::AutoRequire","SubOptParser/AutoRequire.html#method-i-cmddocadd","(name, description, req = nil)","<p>Add the name and description of a command to be documented in help text. This is for use with autoloaded …\n"],["cmdhelp","SubOptParser","SubOptParser.html#method-i-cmdhelp","()",""],["generate_require_path","SubOptParser::AutoRequire","SubOptParser/AutoRequire.html#method-i-generate_require_path","(name)","<p>Build a path for the given command name to pass to require.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">p</span> = <span class=\"ruby-identifier\">generate_require_path</span>(<span class=\"ruby-identifier\">foo</span>)\n<span class=\"ruby-identifier\">require</span> <span class=\"ruby-identifier\">p</span>\n</pre>\n"],["get_subcommand","SubOptParser","SubOptParser.html#method-i-get_subcommand","(name)","<p>How sub-commands are loaded. If no sub-command can be loaded for the name, <code>nil</code> is returned.\n"],["help","SubOptParser","SubOptParser.html#method-i-help","()","<p>Put the parent help text at the start of this command’s help. This allows for building recursive …\n"],["merge!","SubOptParse::SharedState","SubOptParse/SharedState.html#method-i-merge-21","(other)",""],["method_missing","SubOptParser","SubOptParser.html#method-i-method_missing","(name, *args, &block)","<p>rubocop:enable Metrics/MethodLength\n"],["new","SubOptParse::SharedState","SubOptParse/SharedState.html#method-c-new","(initial_state = {})",""],["new","SubOptParser","SubOptParser.html#method-c-new","(banner = nil, width = 32, indent = \" \" * 4, **args)","<p>Initialize a new SubOptParser.\n<p>If block is given, this object is passed to allow for further initialization. …\n"],["on_parse","SubOptParser","SubOptParser.html#method-i-on_parse","()","<p>A callable that is invoked when this SubOptParser starts parsing arguments. This is primarily here to …\n"],["parse","SubOptParser","SubOptParser.html#method-i-parse","(*argv, into: nil)","<p>Calls parse!.\n"],["parse!","SubOptParser","SubOptParser.html#method-i-parse-21","(argv, into: nil)",""],["post_parse","SubOptParser","SubOptParser.html#method-i-post_parse","(&blk)",""],["pre_parse","SubOptParser","SubOptParser.html#method-i-pre_parse","()",""],["raise_unknown","SubOptParser","SubOptParser.html#method-i-raise_unknown","()","<p>If true, an exception will be thrown when an unknown argument is given.\n"],["raise_unknown=","SubOptParser","SubOptParser.html#method-i-raise_unknown-3D","(value)","<p>If true, an exception will be thrown when an unknown argument is given.\n"],["recursive_merge","SubOptParse::Util","SubOptParse/Util.html#method-c-recursive_merge","(obj1, obj2)","<p>Merge obj2 into obj1, if possible. Only hashes and lists are mergable.\n<p>rubocop:disable Metrics/PerceivedComplexity …\n"],["register","SubOptParser::AutoRequire","SubOptParser/AutoRequire.html#method-c-register","()","<p>This registers a command with a description with the current values of @@auto_require_command_name and …\n"],["respond_to_missing?","SubOptParser","SubOptParser.html#method-i-respond_to_missing-3F","(_name, _include_private = false)",""],["CHANGELOG","","CHANGELOG_md.html","","<p>[0.1.24]\n<p>RDoc updates.\n<p>GitHub build updates.\n"],["README","","README_md.html","","<p>SubOptParse\n<p><img src=\"https://badge.fury.io/rb/suboptparse.svg\">\n<img src=\"https://snyk.io/test/github/basking2/suboptparse/badge.svg\"> ...\n"]]}}